#!/usr/bin/env python3
# scripts/sync_env_from_rg_outputs.py
from __future__ import annotations
import argparse
import json
import subprocess
import sys
from pathlib import Path
from typing import Dict, Any


def run_az(cmd: list[str]) -> str:
    return subprocess.check_output(cmd, text=True)


def latest_outputs_with_values(resource_group: str) -> Dict[str, Any]:
    raw = run_az(
        ["az", "deployment", "group", "list", "-g", resource_group, "-o", "json"]
    )
    deployments = json.loads(raw)
    if not deployments:
        raise RuntimeError(f"No deployments found in resource group: {resource_group}")
    # sort newest â†’ oldest
    deployments.sort(
        key=lambda d: d.get("properties", {}).get("timestamp", ""), reverse=True
    )
    for d in deployments:
        outputs = (d.get("properties") or {}).get("outputs") or {}
        # non-empty dict with at least one .value
        if isinstance(outputs, dict) and any(
            isinstance(v, dict) and "value" in v for v in outputs.values()
        ):
            return outputs
    # none had outputs
    return {}


def to_env_key(name: str) -> str:
    return name.upper()  # you said outputs are snake_case


def normalize_value(v: Any) -> str:
    if v is None:
        return ""
    if isinstance(v, bool):
        return "true" if v else "false"
    return str(v).replace("\r\n", "\n").replace("\n", r"\n")


def read_dotenv(path: Path) -> Dict[str, str]:
    if not path.exists():
        return {}
    out: Dict[str, str] = {}
    for line in path.read_text(encoding="utf-8").splitlines():
        line = line.strip()
        if not line or line.startswith("#") or "=" not in line:
            continue
        k, v = line.split("=", 1)
        out[k.strip()] = v.strip()
    return out


def write_dotenv(path: Path, data: Dict[str, str]) -> None:
    path.parent.mkdir(parents=True, exist_ok=True)
    lines = ["# Generated by sync_env_from_rg_outputs.py\n"]
    for k in sorted(data):
        lines.append(f"{k}={data[k]}\n")
    path.write_text("".join(lines), encoding="utf-8")


def main() -> int:
    ap = argparse.ArgumentParser()
    ap.add_argument(
        "--rg", "--resource-group", dest="rg", required=True, help="Resource group name"
    )
    ap.add_argument("--env-name", required=True, help="AZURE_ENV_NAME (e.g., dev)")
    args = ap.parse_args()

    outputs = latest_outputs_with_values(args.rg)
    if not outputs:
        print(
            f"No deployments with non-empty outputs found in {args.rg}.",
            file=sys.stderr,
        )
        return 2

    new_env: Dict[str, str] = {}
    for k, obj in outputs.items():
        if isinstance(obj, dict) and "value" in obj:
            new_env[to_env_key(k)] = normalize_value(obj["value"])

    for dest in (Path(f".azure/{args.env_name}/.env"), Path(".env")):
        cur = read_dotenv(dest)
        cur.update(new_env)
        write_dotenv(dest, cur)
        print(f"Wrote {dest} ({len(new_env)} vars)")

    return 0


if __name__ == "__main__":
    sys.exit(main())
